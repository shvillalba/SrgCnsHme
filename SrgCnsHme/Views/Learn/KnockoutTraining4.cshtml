@{
  ViewBag.Title = "Knockout Training 4: Creating custom bindings";
}
@Styles.Render("~/Content/learning")

<h2>Knockout Training 4: Creating custom bindings</h2>

<h3 data-bind="text: question"></h3>
<p>Please distribute <b data-bind="text: pointsBudget"></b>points between the following options.</p>

<table>
  <thead>
    <tr>
      <th>Option</th>
      <th>Importance</th>
    </tr>
  </thead>
  <tbody data-bind="foreach: answers">
    <tr>
      <td data-bind="text: answerText"></td>
      @*<td><select data-bind="options: [1,2,3,4,5], value: points"></select></td>*@
      <td data-bind="starRating: points"></td>
    </tr>
  </tbody>
</table>

<h3 data-bind="fadeVisible: pointsUsed() > pointsBudget">You've used too many points! Please remove some.</h3>
<p>You've got <b data-bind="text: pointsBudget - pointsUsed()"></b> points left to use.</p>
<button data-bind="jqButton: {enable: pointsUsed() <= pointsBudget}, click: save">Finished</button>

@section Scripts {
  @Scripts.Render("~/jsLearn")
  <script src="@Url.Content("~/Scripts/jquery-ui-1.10.1.min.js")"></script> @*Just to use jQuery-ui gadgets here. Otherwise bootstrap's styles seem to prevail.*@

  <script type="text/javascript"> 
    ko.bindingHandlers.starRating = {
      init: function (element, valueAccessor) {
        $(element).addClass("starRating");
        for (var i = 0; i < 5; i++)
          $("<span>").appendTo(element);

        // Handle mouse events on the stars
        $("span", element).each(function (index) {
          $(this).hover(
              function () { $(this).prevAll().add(this).addClass("hoverChosen"); },
              function () { $(this).prevAll().add(this).removeClass("hoverChosen"); }
          );
        });
      },
      update: function (element, valueAccessor) {
        // Give the first x stars the "chosen" class, where x <= rating
        var observable = valueAccessor();
        $("span", element).each(function (index) {
          $(this).toggleClass("chosen", index < observable());
        });
        
        // Handle mouse events on the stars
        $("span", element).each(function (index) {
          $(this).hover(
              function () { $(this).prevAll().add(this).addClass("hoverChosen"); },
              function () { $(this).prevAll().add(this).removeClass("hoverChosen"); }
          ).click(function () {
            //var observable = valueAccessor();  // Get the associated observable
            observable(index + 1);               // Write the new rating to it //LEARN: this is the "valueAccessor" (the "points" value in: <td data-bind="starRating: points"></td>)
          });
        });
      }
    };

    ko.bindingHandlers.jqButton = {
      init: function (element) {
        $(element).button(); // Turns the element into a jQuery UI button
      },
      update: function (element, valueAccessor) {
        var currentValue = valueAccessor();
        // Here we just update the "disabled" state, but you could update other properties too
        $(element).button("option", "disabled", currentValue.enable === false);
      }
    };
    
    ko.bindingHandlers.fadeVisible = {
      init: function (element, valueAccessor) { //LEARN: "valueAccessor is what is to the right of the binding name in the markup (i.e.:  the "pointsU ... " value in <h3 data-bind="fadeVisible: pointsUsed() > pointsBudget">... too many points</h3>
        // Start visible/invisible according to initial value
        var shouldDisplay = valueAccessor();
        $(element).toggle(shouldDisplay);
      },
      update: function (element, valueAccessor) {
        // On update, fade in/out
        var shouldDisplay = valueAccessor();
        shouldDisplay ? $(element).fadeIn() : $(element).fadeOut();
      }
    };

    function Answer(text) { this.answerText = text; this.points = ko.observable(1); }

    function SurveyViewModel(question, pointsBudget, answers) {
      this.question = question;
      this.pointsBudget = pointsBudget;
      this.answers = $.map(answers, function (text) { return new Answer(text); });
      this.save = function () { alert('To do'); };

      this.pointsUsed = ko.computed(function () {
        var total = 0;
        for (var i = 0; i < this.answers.length; i++)
          total += this.answers[i].points();
        return total;
      }, this);
    }

    ko.applyBindings(new SurveyViewModel("Which factors affect your technology choices?", 10, [
      "Functionality, compatibility, pricing - all that boring stuff",
      "How often it is mentioned on Hacker News",
      "Number of gradients/dropshadows on project homepage",
      "Totally believable testimonials on project homepage"
    ]));
  </script>
}